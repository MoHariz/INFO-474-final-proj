[meta title:"Learn Idyll" description:"Short description of your project" /]

// [Header
//   fullWidth:true
//   title:"Learn Idyll"
//   subtitle:"Welcome to Idyll. Open index.idyll to start writing"
//   author:"Your Name Here"
//   authorLink:"https://idyll-lang.org"
//   date:`(new Date()).toDateString()`
//   background:"#222222"
//   color:"#ffffff"
//    /]

// ## Introduction

// This is an Idyll post. It is generated via
// the file `index.idyll`. To compile this post using
// idyll, run the command `idyll` inside of this directory.


// Idyll posts are designed to support interaction and
// data-driven graphics.

// [var name:"state" value:0 /]
// [CustomD3Component className:"d3-component" state:state /]
// [button onClick:`state++`]
//   Click Me.
// [/button]

// Configuration can be done via the `idyll` field in `package.json`.

// ## Markup

// Idyll is based on Markdown.

// You can use familiar syntax
// to create **bold** (`**bold**` ) and *italic* (``*italic*` ) styles,

// * lists
// * of
// * items,

// ```
// * lists
// * of
// * items,
// ```

// 1. and numbered
// 2. lists
// 3. of items,


// ```
// 1. and numbered
// 2. lists
// 3. of items,
// ```

// in addition to [hyperlinks](https://idyll-lang.org) and images:

// ![quill](static/images/quill.svg)

// ```
// ![quill](static/images/quill.svg)
// ```

// ## Components
// Components accept properties:

// ```
// [Range value:x min:0 max:1 /]
// ```

// that can be bound to variables to achieve interactivity (more in next section).


// A variety of components are included by default. See [all the available components](https://idyll-lang.org/docs/components/). You can also use any html tag, for example: `[div] A div! [/div]`.

// To create your own, add it to the `components/` folder. There are examples of how to use Idyll with React and D3 based components already included.



// ## Interactivity

// Here is how you can instantiate a variable and bind it to a component:

// [var name:"exampleVar" value:5 /]

// [Range min:0 max:10 value:exampleVar /]
// [Display value:exampleVar /]



// [var name:"x" value:0 /]
// [derived name:"y" value:`x`/]
// 0 [Range value:x min:0 max:100 /] 100
// Value of x: [Display var:`x` /].
// Value of y: [Display var:`y` /].

// [data name:"vgdata" source:"vgsales.csv"/]


[Fixed]
  

  [Conditional if:`step === 0`]
    [data name:"data0" source:"genre_sales_summary_1980_1989.csv"/]
    [BarChart data:data0/]
  [/Conditional]

  [Conditional if:`step === 1`]
    [data name:"data1" source:"genre_sales_summary_1990_1999.csv"/]
    [BarChart data:data1/]
  [/Conditional]

  [Conditional if:`step === 2`]
    [data name:"data2" source:"genre_sales_summary_2000_2009.csv"/]
    [BarChart data:data2/]
  [/Conditional]

  [Conditional if:`step === 3`]
    [data name:"data3" source:"genre_sales_summary_2010_2018.csv"/]
    [BarChart data:data3/]
  [/Conditional]
  
  
[/Fixed]

[section]
  [Header
    fullWidth:true
    title:"Video Games"
    subtitle:"An exploratory analysis within the video game industry"
    author:"Muhammad Hariz, Davis Huynh, and Liuyang Fu"
    authorLink:"https://github.com/MoHariz/INFO-474-final-proj"
    date:`(new Date()).toDateString()`
    background:"#222222"
    color:"#ffffff"
    /]
[/section]

[var name:"step" value:0 /]

[Scroller currentStep:step ]

  [Step]
  # 1980-1989. [Display value:step /]

  This post is testing out an integration between Idyll and Flourish. I've created a component that
  enables authors to embed their Flourish visualizations directly in Idyll articles. The visualization you see on the right was taken directly from the Flourish documentation.
  [/Step]

  [Step]
  # 1990-1999. [Display value:step /]

  You can use Idyll variables to trigger some updates to the Flourish visualization. In this case, I've linked the scroll state in Idyll to the slide number in Flourish.
  [/Step]

  [Step]
  # 2000-2009. [Display value:step /]

  This isn't perfect: I'm still learning about their API to see what exactly can and can't be controlled by
  an external library like Idyll. And the responsive sizing needs work.
  [/Step]

  [Step]
  # 2010-2018. [Display value:step /]

  However, I think this points to a path forward where specialized tools may be combined
  to create a really nice workflow to go from data to visualization to story to publication,
  without needing to write custom JavaScript.
  [/Step]

[/section]

[section]
# 2010-2019.

// [var name:"selectVal" value:"test2"/]
// [Select value:selectVal options:`["test1", "test2"]`  /]
// asdasdasdasd 
// [Display value:selectVal/]

[var name:"genreName" value:"platform"/]

[var name:"platformName" value:"XBOX"/]
[WhatIf genre:genreName platform:platformName/]

[Display value:genreName/]
// [var name:"x" value: 10 /]
// [Select value:x options:`[
//   { value:10 , label: "value 10" }, 
//   { value:20, label: "value 20" },
//   { value:100, label: "value 100" },
// ]` /]

// [Display value:x/]

[/section]
[/Scroller]



